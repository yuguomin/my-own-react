{"version":3,"file":"bundle.esm.js","sources":["../../src/fishtail@15/contants/SpecialChars.ts","../../src/fishtail@15/render.ts","../../src/fishtail@15/createElement.ts","../../src/fishtail@15/index.tsx"],"sourcesContent":["export const EVENT_LISTENER_START = 'on';\n\nexport const TEXT_ELEMENT_TYPE = 'TEXT ELEMENT';","import { IFishtailElement, IFishtailElementProps } from './interface/IFishtailElement';\nimport { EVENT_LISTENER_START, TEXT_ELEMENT_TYPE } from './contants/SpecialChars';\nimport { IFishtailInstance } from './interface/IFishtailInstance';\n\n// 保存最新的根节点Instance数据\nlet rootInstance: null | IFishtailInstance = null;\n\n/** \n * @description\n * 1. 相当于 ReactDOM.render 方法\n * 2. 递归的把传进来的 fishtail 元素创建成真实的 DOM tree，绑定每个元素的props中事件和属性\n * 3. 将 DOM tree 添加到 parentDom 中\n * @param { IFishtailElement } element 一个 fishtail 元素类型\n * @param { Element } parentDom 要渲染的目标 dom 元素\n * @return { undefined }\n */\n\nexport const render: (element: IFishtailElement, parentDom: Element | Text) => void = (element, parentDom) => {\n  let prevInstance = rootInstance;\n  let nextInstace = reconcile(parentDom, prevInstance, element);\n  // 记录最新的 根节点 实例\n  rootInstance = nextInstace;\n}\n\n// 根据不同情况协调两个 dom tree，并做不同方式的渲染\nconst reconcile: (parentDom: Element | Text, instance: IFishtailInstance | null | undefined, element: IFishtailElement | undefined) => IFishtailInstance | null\n  = (parentDom, instance, element) => {\n    if (instance === null || instance === undefined) {\n      if (element === undefined) { return null; } // <-------- 两个都没有就算了吧\n      // 新增节点，做添加\n      const newInstance = instantiate(element);\n      parentDom.appendChild(newInstance.dom);\n      return newInstance;\n    } else if (element === undefined) {\n      // 当props.children较短时，element出现undefined实际上就是需要删除\n      parentDom.removeChild(instance.dom);\n      return null;\n    } else if (instance.element.type === element.type) {\n      // 说明相同类型的type，可复用dom，继而修改原 dom 上的属性\n      updateDomProperties(instance.dom, instance.element.props, element.props);\n      instance.childInstances = reconcileChildren(instance, element);\n      // dom 已更新至最新，Fishtail element保持同步\n      instance.element = element;\n      return instance;\n    } else {\n      // 两边不同，都存在，做替换\n      const newInstance = instantiate(element);\n      parentDom.replaceChild(newInstance.dom, instance.dom);\n      return newInstance;\n    }\n  }\n\n// 将一个 fishtail 元素实例化成 fishtail instance 结构\nconst instantiate: (element: IFishtailElement) => IFishtailInstance = (element) => {\n  const { type, props } = element;\n  const isTextELement = type === TEXT_ELEMENT_TYPE;\n  const dom = isTextELement ? document.createTextNode('') : document.createElement(type);\n  // 抽离属性添加，加入对比层，供复用 dom 的场景下复用方法\n  updateDomProperties(dom, {}, props);\n\n  const childELements = props.children || [];\n  // 这里通过递归不断拿到下面每一层的 instance 结构，再通过后面的 append 操作生成出完整的 DOM 树\n  const childInstances = childELements.map(instantiate);\n  childInstances.forEach((childrenInstance) => {\n    dom.appendChild(childrenInstance.dom);\n  });\n  return { element, dom, childInstances }\n}\n\n// 对比更新dom的属性和事件，核心是最终 dom 的属性要和 nextProps保持一致，但不要重复删除添加\nconst updateDomProperties = (dom: Element | Text, prevProps: IFishtailElementProps, nextProps: IFishtailElementProps) => {\n  const isNew = (prev, next) => key =>\n    prev[key] !== next[key];\n  Object.keys(prevProps).forEach((propName) => {\n    // 判断这个属性是不是被删除或者被修改\n    if (!(propName in nextProps) || isNew(prevProps, nextProps)(propName)) {\n      if (propName.startsWith(EVENT_LISTENER_START)) {\n        const eventName = propName.toLowerCase().slice(2);\n        dom.removeEventListener(eventName, prevProps[propName]);\n      } else if (propName !== 'children') {\n        dom[propName] = null;\n      }\n    }\n  });\n  Object.keys(nextProps).forEach((propName) => {\n    // 判断这个属性是否为新增或者更新\n    if (isNew(prevProps, nextProps)(propName)) {\n      if (propName.startsWith(EVENT_LISTENER_START)) {\n        const eventName = propName.toLowerCase().slice(2);\n        dom.addEventListener(eventName, nextProps[propName]);\n      } else if (propName !== 'children') {\n        dom[propName] = nextProps[propName];\n      }\n    }\n  });\n}\n\nconst reconcileChildren = (instance: IFishtailInstance, element: IFishtailElement) => {\n  const { dom, childInstances } = instance;\n  const nextChlidElements = element.props.children || [];\n  const newChildInstances: Array<IFishtailInstance | null> = [];\n\n  const count = Math.max(childInstances.length, nextChlidElements.length);\n  for (let i = 0; i < count; i++) {\n    const childInstance = childInstances[i];\n    const childElement = nextChlidElements[i];\n    // 递归上一层的 reconcile 方法，实现深度 reconcile\n    const newChildInstance = reconcile(dom, childInstance, childElement);\n    newChildInstances.push(newChildInstance);\n  }\n  return newChildInstances.filter(instance => instance !== null && instance !== undefined);\n}\n","import { IFishtailElementProps, IFishtailElement } from './interface/IFishtailElement';\nimport { TEXT_ELEMENT_TYPE } from './contants/SpecialChars';\n\n/** \n * @description\n * 相当于 React.createElement 方法\n * 1. 该方法的目的是把 JSX 被编译的东西，利用该方法转换成一个 fishtail 元素\n * 2. 转换出的 fishtail 元素将可以在 render 中调用继而渲染到页面\n * @param { string } type 元素类型\n * @param { IFishtailElementProps } config 元素的属性集合\n * @param { Array<IFishtailElement|string> } childrenList 子元素的列表\n * @return { IFishtailElement } 一个 fishtail 元素\n*/\n\nexport const createElement:\n  (type: string, config: IFishtailElementProps, ...childrenList: Array<IFishtailElement | string | null | false | undefined | number>)\n    => IFishtailElement = (type, config, ...childrenList) => {\n      const props = { ...config };\n      const finalChlidren: IFishtailElement[] = [];\n      [...childrenList].forEach((children) => {\n        if (children !== null && children !== false && children !== undefined) {\n          if (!(children instanceof Object)) {\n            children = createTextElement(children);\n          }\n          finalChlidren.push(children);\n        }\n      });\n      props.children = finalChlidren;\n      return { type, props }\n    }\n\n/** \n * @description\n * 当处理 JSX 时，遇到 text 文案类型时，需要特殊创建\n * @param { string | number } nodeValue 文案内容\n * @return { IFishtailElement } 最终也是返回一个 fishtaile 元素，不过是文案类型的\n */\nconst createTextElement = (nodeValue: string | number) => {\n  return createElement(TEXT_ELEMENT_TYPE, { nodeValue });\n}\n","import { render } from './render'\nimport { createElement } from './createElement';\n\nconst Fishtail = {\n  render,\n  createElement\n}\n\ndeclare global {\n  interface Window {\n    Fishtail: any;\n  }\n}\n\nwindow.Fishtail = Fishtail;"],"names":[],"mappings":"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"}