{"version":3,"file":"bundle.cjs.js","sources":["../../src/fishtail@15/contants/SpecialChars.ts","../../src/fishtail@15/core/updateDomProperties.ts","../../src/fishtail@15/core/component.ts","../../src/fishtail@15/core/instantiate.ts","../../src/fishtail@15/contants/LifeCircleNameEnum.ts","../../src/fishtail@15/core/reconcile.ts","../../src/fishtail@15/core/render.ts","../../src/fishtail@15/core/createElement.ts","../../src/fishtail@15/index.ts"],"sourcesContent":["export const EVENT_LISTENER_START = 'on';\n\nexport const TEXT_ELEMENT_TYPE = 'TEXT ELEMENT';","import { EVENT_LISTENER_START } from '../contants/SpecialChars';\nimport { IFishtailElementProps } from '../interface/IFishtailElement';\n\n/** \n * @description\n * 对比更新dom的属性和事件，核心是最终 dom 的属性要和 nextProps保持一致，但不要重复删除添加\n * @param {Element | Text} 要更新的dom节点\n * @param {IFishtailElementProps} 该节点之前的props数据\n * @param {IFishtailElementProps} 该节点最新的props数据\n */\nexport const updateDomProperties = (dom: Element | Text, prevProps: IFishtailElementProps, nextProps: IFishtailElementProps) => {\n  const isNew = (prev, next) => key =>\n    prev[key] !== next[key];\n  Object.keys(prevProps).forEach((propName) => {\n    // 判断这个属性是不是被删除或者被修改\n    if (!(propName in nextProps) || isNew(prevProps, nextProps)(propName)) {\n      if (propName.startsWith(EVENT_LISTENER_START)) {\n        const eventName = propName.toLowerCase().slice(2);\n        dom.removeEventListener(eventName, prevProps[propName]);\n      } else if (propName !== 'children') {\n        dom[propName] = null;\n      }\n    }\n  });\n  Object.keys(nextProps).forEach((propName) => {\n    // 判断这个属性是否为新增或者更新\n    if (isNew(prevProps, nextProps)(propName)) {\n      if (propName.startsWith(EVENT_LISTENER_START)) {\n        const eventName = propName.toLowerCase().slice(2);\n        dom.addEventListener(eventName, nextProps[propName]);\n      } else if (propName !== 'children') {\n        dom[propName] = nextProps[propName];\n      }\n    }\n  });\n}","import { IFishtailElement } from '../interface/IFishtailElement';\nimport { IFishtailInstance } from '../interface/IFishtailInstance';\nimport { LifeCircleNameEnum } from '../contants/LifeCircleNameEnum';\nimport { reconcile } from './reconcile';\n\n/** \n * @description\n * 类组件的基础抽象类，实现基本的一些功能配置：\n * 1. props和state绑定\n * 2. setState更新状态\n * 3. 定义render抽象类方法\n */\nexport abstract class Component {\n  constructor(props) {\n    this.props = props;\n    this.state = this.state;\n  }\n  public props = {};\n  public state = {};\n  public __internalInstance: IFishtailInstance;\n\n  public setState(modifieState) {\n    this.state = Object.assign(this.state, modifieState);\n    updateInstance(this.__internalInstance);\n  }\n  abstract render(): IFishtailElement;\n}\n\n/** \n * @description\n * 调用组件实例生命周期的方法\n * @param {instance} instance 组件实例数据\n * @param {} lifecycleName 生命周期方法名\n */\nexport const callClassComponentLifeCycle = (instance: IFishtailInstance, lifecycleName: LifeCircleNameEnum) =>  {\n  if (instance && instance.publicInstance) {\n    if (instance.publicInstance[lifecycleName]) {\n      return instance.publicInstance[lifecycleName]();\n    }\n  }\n}\n\n/** \n * @description\n * 通过实例上的内部实例数据，调用协调更新组件显示\n * @param {internalInstance} 组件内部实例数据\n */\nconst updateInstance = (internalInstance) => {\n  const parentDom = internalInstance.dom.parentNode;\n  const element = internalInstance.element;\n  reconcile(parentDom, internalInstance, element);\n}\n","import { IFishtailElement } from '../interface/IFishtailElement';\nimport { TEXT_ELEMENT_TYPE } from '../contants/SpecialChars';\nimport { updateDomProperties } from './updateDomProperties';\nimport { IFishtailInstance } from '../interface/IFishtailInstance';\nimport { Component } from './component';\n// import { IFishtailInstance } from \"./interface/IFishtailInstance\";\n\n/**\n * @description\n * 将传进来的VDOM进行实例化，实例化实际上就是把VDOM和真实DOM进行映射，方便操作\n * @param {IFishtailElement} element 想要实例化的VDOM，可能是DOM节点的也可能是类组件或者函数组件\n * @return {IFishtailInstance} element实例化后的内容\n */\nexport const instantiate: (element: IFishtailElement) => IFishtailInstance = (element) => {\n  const { type, props } = element;\n  if (typeof type === 'string') {\n    // HTML节点\n    const isTextELement = type === TEXT_ELEMENT_TYPE;\n    const dom = isTextELement ? document.createTextNode('') : document.createElement(type);\n\n    updateDomProperties(dom, {}, props);\n\n    const childELements = props.children || [];\n    // 这里通过递归不断拿到下面每一层的 instance 结构，再通过后面的 append 操作生成出完整的 DOM 树\n    const childInstances = childELements.map(instantiate);\n    childInstances.forEach((childrenInstance) => {\n      dom.appendChild(childrenInstance.dom);\n    });\n    return { element, dom, childInstances }\n  } else if (type.prototype instanceof Component) {\n    // 类组件\n    const instance = {} as IFishtailInstance;\n    const publicInstance = createPublicInstance(element, instance); // 创建组件实例对象\n    const childElement = publicInstance.render(); // 执行实例上的render方法\n    const childInstance = instantiate(childElement); // 递归拿到子实例\n    const { dom } = childInstance; // 拿到整个dom\n    Object.assign(instance, { dom, element, childInstance, publicInstance });\n    return instance;\n  } else {\n    // 函数组件\n    const childElement = type(props);\n    // @ts-ignore\n    const childInstance = instantiate(childElement);\n    const { dom } = childInstance;\n    return { dom, element, childInstance }\n  }\n}\n\n/** \n * @description\n * 生成类组件的对应公共实例，并且将该组件的instance数据绑定在实例上\n * @param {IFishtailElement} element \n */\nconst createPublicInstance = (element: IFishtailElement, internalInstance: IFishtailInstance) => {\n  const { type, props } = element;\n  if (typeof type !== 'string') {\n    // @ts-ignore\n    const publicInstance = new type(props);\n    publicInstance.__internalInstance = internalInstance;\n    return publicInstance;\n  }\n}","export enum LifeCircleNameEnum {\n  willMount = 'componentWillMount',\n  didMount = 'componentDidMount',\n  receiveProps = 'componentWillReceiveProps',\n  shouldUpdate = 'shouldComponentUpdate',\n  willUpdate = 'componentWillUpdate',\n  didUpdate = 'componentDidUpdate',\n  willUnmount = 'componentWillUnmount'\n}","import { IFishtailInstance } from '../interface/IFishtailInstance';\nimport { IFishtailElement } from '../interface/IFishtailElement';\nimport { instantiate } from './instantiate';\nimport { updateDomProperties } from './updateDomProperties';\nimport { callClassComponentLifeCycle } from './component';\nimport { LifeCircleNameEnum } from '../contants/LifeCircleNameEnum'\n\n/** \n * @description\n * 做节点更新，节点(DOM和组件)复用的基础上的DOM变化，如节点增删改，以及属性变化\n * @param {Element | Text} parentDom 正在进行协调的节点的父容器节点\n * @param {IFishtailInstance | null | undefined} instance 正在协调的节点的实例数据，包括相关dom信息和VDOM描述及子节点信息\n * @param {IFishtailElement | undefined} element 正在协调节点的最新描述信息 VDOM\n * @return {IFishtailInstance | null} 最新的节点实例数据\n */\nexport const reconcile: (parentDom: Element | Text, instance: IFishtailInstance | null | undefined, element: IFishtailElement | undefined) => IFishtailInstance | null\n  = (parentDom, instance, element) => {\n    if (instance === null || instance === undefined) {\n      if (element === undefined) { return null; } // <-------- 两个都没有就算了吧\n      // 新增节点，做添加\n      const newInstance = instantiate(element);\n      callClassComponentLifeCycle(newInstance, LifeCircleNameEnum.willMount);\n      parentDom.appendChild(newInstance.dom);\n      callClassComponentLifeCycle(newInstance, LifeCircleNameEnum.didMount);\n      return newInstance;\n    } else if (element === undefined) {\n      // 没有最新节点，做删除\n      callClassComponentLifeCycle(instance, LifeCircleNameEnum.willUnmount);\n      parentDom.removeChild(instance.dom);\n      return null;\n    } else if (instance.element.type !== element.type) {\n      // 两边不同，都存在，做替换\n      const newInstance = instantiate(element);\n      callClassComponentLifeCycle(instance, LifeCircleNameEnum.willUnmount);\n      callClassComponentLifeCycle(newInstance, LifeCircleNameEnum.willMount);\n      parentDom.replaceChild(newInstance.dom, instance.dom);\n      callClassComponentLifeCycle(newInstance, LifeCircleNameEnum.didMount);\n      return newInstance;\n    } else if (typeof element.type === 'string') {\n      // 说明相同类型的type，可复用dom，继而修改原 dom 上的属性\n      updateDomProperties(instance.dom, instance.element.props, element.props);\n      instance.childInstances = reconcileChildren(instance, element);\n      // dom 已更新至最新，Fishtail element保持同步\n      instance.element = element;\n      return instance;\n    } else {\n      const shouldUpdateStatus = callClassComponentLifeCycle(instance, LifeCircleNameEnum.shouldUpdate);\n      if ([false, null, '', 0].includes(shouldUpdateStatus)) { return null; }\n      callClassComponentLifeCycle(instance, LifeCircleNameEnum.willUpdate);\n      let childElement: IFishtailElement;\n      if (instance.publicInstance) {\n        // 这一步实际上对修改了state的组件是没变化的，但是通过state绑定给子组件prop后，通过递归执行，子组件就能拿到最新的prop了\n        instance.publicInstance.props = element.props;\n        // 拿到组件最新的 element（因为既更新过state也更新过prop），这里通过render和state的改变都会变成新的element中\n        childElement = instance.publicInstance.render();\n      } else {\n        // @ts-ignore\n        childElement = element.type(element.props);\n      }\n      // 拿到过去的整个组件的子实例\n      const oldChildInstance = instance.childInstance;\n      // 对组件的前后状态做协调，最终打造新的一个 childInstance 更新，其实这里相当于把原先的rootInstance绑定在了组件自己内部\n      // 组件最终会使用HTML型的element，所以会走到其它判断里，完成修改等操作\n      const childInstance = reconcile(parentDom, oldChildInstance, childElement);\n      if (!childInstance) { return null; }\n      callClassComponentLifeCycle(instance, LifeCircleNameEnum.didUpdate);\n      instance.dom = childInstance.dom; // 更新dom\n      instance.childInstance = childInstance; // 更新childInstance\n      instance.element = element; // 更新element\n      return instance;\n    }\n  }\n\n/** \n * @description\n * 协调更新DOM节点的子节点信息，通过拿到最新的VDOM列表和之前的进行协调对比\n * @param {IFishtailInstance} 要更新其子节点的实例数据\n * @param {IFishtailElement} 要更新子节点的VDOM\n */\nconst reconcileChildren = (instance: IFishtailInstance, element: IFishtailElement) => {\n  const { dom, childInstances = [] } = instance;\n  const nextChlidElements = element.props.children || [];\n  const newChildInstances: Array<IFishtailInstance | null> = [];\n\n  const count = Math.max(childInstances.length, nextChlidElements.length);\n  for (let i = 0; i < count; i++) {\n    const childInstance = childInstances[i];\n    const childElement = nextChlidElements[i];\n    // 递归上一层的 reconcile 方法，实现深度 reconcile\n    const newChildInstance = reconcile(dom, childInstance, childElement);\n    newChildInstances.push(newChildInstance);\n  }\n  return newChildInstances.filter(instance => instance !== null && instance !== undefined);\n}","import { IFishtailElement } from '../interface/IFishtailElement';\nimport { IFishtailInstance } from '../interface/IFishtailInstance';\nimport { reconcile } from './reconcile';\n\n// 保存最新的根节点Instance数据\nlet rootInstance: null | IFishtailInstance = null;\n\n/** \n * @description\n * 1. 相当于 ReactDOM.render 方法\n * 2. 递归的把传进来的 fishtail 元素创建成真实的 DOM tree，绑定每个元素的props中事件和属性\n * 3. 将 DOM tree 添加到 parentDom 中\n * @param { IFishtailElement } element 一个 fishtail 元素类型\n * @param { Element } parentDom 要渲染的目标 dom 元素\n * @return { undefined }\n */\nexport const render: (element: IFishtailElement, parentDom: Element | Text) => void = (element, parentDom) => {\n  const prevInstance = rootInstance;\n  const nextInstace = reconcile(parentDom, prevInstance, element);\n  // 记录最新的 根节点 实例\n  rootInstance = nextInstace;\n}\n","import { IFishtailElementProps, IFishtailElement } from '../interface/IFishtailElement';\nimport { TEXT_ELEMENT_TYPE } from '../contants/SpecialChars';\n\n/** \n * @description\n * 相当于 React.createElement 方法\n * 1. 该方法的目的是把 JSX 被编译的东西，利用该方法转换成一个 fishtail 元素\n * 2. 转换出的 fishtail 元素将可以在 render 中调用继而渲染到页面\n * @param { string } type 元素类型\n * @param { IFishtailElementProps } config 元素的属性集合\n * @param { Array<IFishtailElement|string> } childrenList 子元素的列表\n * @return { IFishtailElement } 一个 fishtail 元素\n*/\nexport const createElement:\n  (type: string, config: IFishtailElementProps, ...childrenList: Array<IFishtailElement | string | null | false | undefined | number>)\n    => IFishtailElement = (type, config, ...childrenList) => {\n      const props = { ...config };\n      const finalChlidren: IFishtailElement[] = [];\n      // @ts-ignore\n      const rawChildren = [].concat(...childrenList);\n      rawChildren.forEach((children) => {\n        if (children !== null && children !== false && children !== undefined) {\n          if (!(children instanceof Object)) {\n            children = createTextElement(children);\n          }\n          finalChlidren.push(children);\n        }\n      });\n      props.children = finalChlidren;\n      return { type, props }\n    }\n\n/** \n * @description\n * 当处理 JSX 时，遇到 text 文案类型时，需要特殊创建\n * @param { string | number } nodeValue 文案内容\n * @return { IFishtailElement } 最终也是返回一个文案类型的 fishtaile 元素\n */\nconst createTextElement = (nodeValue: string | number) => {\n  return createElement(TEXT_ELEMENT_TYPE, { nodeValue });\n}\n","import { render } from './core/render'\nimport { createElement } from './core/createElement';\nimport { Component } from './core/component';\n\nconst Fishtail = {\n  render,\n  createElement,\n  Component\n}\n\ndeclare global {\n  interface Window {\n    Fishtail: any;\n  }\n}\n// 最终打包的文件引入后可通过 Fishtail 全局变量使用\nwindow.Fishtail = Fishtail;"],"names":[],"mappings":"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"}